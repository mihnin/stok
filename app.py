import streamlit as st
import pandas as pd
import datetime
import plotly.express as px
import plotly.graph_objects as go
import io
import os
import base64

from constants import COLOR_CODES, METHOD1_REQUIRED_COLUMNS, METHOD2_REQUIRED_COLUMNS
from utils import validate_columns, generate_sample_data_method1, generate_sample_data_method2
from data_processors import (
    forecast_with_demand,
    forecast_without_demand,
    handle_materials_without_date,
    handle_mixed_batches
)
from visualization import display_results
#from documentation import get_documentation_content

def initialize_session_state():
    """Initialize session state variables if they don't exist"""
    if 'uploaded_data' not in st.session_state:
        st.session_state.uploaded_data = None
    
    if 'forecast_summary' not in st.session_state:
        st.session_state.forecast_summary = None
    
    if 'forecast_details' not in st.session_state:
        st.session_state.forecast_details = None
        
    if 'forecast_method' not in st.session_state:
        st.session_state.forecast_method = "–ú–µ—Ç–æ–¥ 1: –° —É—á–µ—Ç–æ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
    
    if 'forecast_enddate' not in st.session_state:
        st.session_state.forecast_enddate = datetime.datetime.now().date() + datetime.timedelta(days=365)
    
    if 'forecast_step' not in st.session_state:
        st.session_state.forecast_step = 30
        
    if 'data_source' not in st.session_state:
        st.session_state.data_source = "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª"
        
    if 'selected_forecast_date' not in st.session_state:
        st.session_state.selected_forecast_date = None
        
    if 'export_type' not in st.session_state:
        st.session_state.export_type = "Excel (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)"
        
    if 'last_uploaded_file' not in st.session_state:
        st.session_state.last_uploaded_file = None

def on_method_change():
    """Reset uploaded data when method changes"""
    st.session_state.uploaded_data = None
    st.session_state.forecast_summary = None
    st.session_state.forecast_details = None
    st.session_state.selected_forecast_date = None

def on_file_upload():
    """Handle file upload"""
    return

def main():
    st.set_page_config(
        page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –°–ù–ó –∏ –ö–°–ù–ó",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Initialize session state
    initialize_session_state()
    
    # Apply CSS
    st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        color: #2B5797;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #2B5797;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .status-box {
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }
    .status-likvid {
        background-color: #00b050;
        color: white;
    }
    .status-ksnz {
        background-color: #ffbf00;
        color: black;
    }
    .status-snz {
        background-color: #ff4c4c;
        color: white;
    }
    .status-snz3 {
        background-color: #c00000;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Main content - removed tabs and documentation
    st.markdown('<h1 class="main-header">–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ä—Ö–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤ (–°–ù–ó –∏ –ö–°–ù–ó)</h1>', unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # Method selection with callback
        method = st.radio(
            "–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:",
            [
                "–ú–µ—Ç–æ–¥ 1: –° —É—á–µ—Ç–æ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
                "–ú–µ—Ç–æ–¥ 2: –ë–µ–∑ —É—á–µ—Ç–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø–∞—Å)"
            ],
            on_change=on_method_change,
            key="forecast_method"
        )
        
        # Show appropriate template info based on selected method
        if "–ú–µ—Ç–æ–¥ 1" in method:
            st.info("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ú–µ—Ç–æ–¥–∞ 1 (—Å —É—á–µ—Ç–æ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏)")
        else:
            st.info("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ú–µ—Ç–æ–¥–∞ 2 (–±–µ–∑ —É—á–µ—Ç–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏)")
        
        data_source = st.radio(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
            [
                "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
            ],
            key="data_source"
        )
        
        if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª":
            uploaded_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
                type=["xlsx", "xls"],
                key="file_uploader"
            )
            
            if uploaded_file is not None:
                try:
                    df = pd.read_excel(uploaded_file)
                    st.session_state.uploaded_data = df
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        
        today = datetime.datetime.now().date()
        end_date = st.date_input(
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
            value=st.session_state.forecast_enddate,
            min_value=today,
            max_value=today + datetime.timedelta(days=1825),  # Max 5 years
            key="forecast_enddate"
        )
        
        step_days = st.number_input(
            "–®–∞–≥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–∏):",
            min_value=1,
            max_value=90,
            value=st.session_state.forecast_step,
            key="forecast_step"
        )
        
        st.markdown("---")
        
        st.markdown("""
        ### –£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
        <div class="status-box status-likvid">–õ–∏–∫–≤–∏–¥–Ω—ã–π –∑–∞–ø–∞—Å</div>
        <div class="status-box status-ksnz">–ö–°–ù–ó (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–≤–µ—Ä—Ö–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø–∞—Å)</div>
        <div class="status-box status-snz">–°–ù–ó (–°–≤–µ—Ä—Ö–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø–∞—Å)</div>
        <div class="status-box status-snz3">–°–ù–ó > 3 –ª–µ—Ç</div>
        """, unsafe_allow_html=True)
        
        run_forecast = st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary", use_container_width=True)
        
        # Sample data download
        st.markdown("---")
        st.subheader("–®–∞–±–ª–æ–Ω—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # Create sample data directory if it doesn't exist
        if not os.path.exists('sample_data'):
            os.makedirs('sample_data')
        
        col1, col2 = st.columns(2)
        with col1:
            # Generate sample data if not exists
            if not os.path.exists('sample_data/method1_sample.xlsx'):
                sample_df1 = generate_sample_data_method1()
                sample_df1.to_excel('sample_data/method1_sample.xlsx', index=False)
            
            st.download_button(
                label="–®–∞–±–ª–æ–Ω –¥–ª—è –ú–µ—Ç–æ–¥–∞ 1",
                data=open('sample_data/method1_sample.xlsx', 'rb').read(),
                file_name="—à–∞–±–ª–æ–Ω_–º–µ—Ç–æ–¥1.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        with col2:
            if not os.path.exists('sample_data/method2_sample.xlsx'):
                sample_df2 = generate_sample_data_method2()
                sample_df2.to_excel('sample_data/method2_sample.xlsx', index=False)
            
            st.download_button(
                label="–®–∞–±–ª–æ–Ω –¥–ª—è –ú–µ—Ç–æ–¥–∞ 2",
                data=open('sample_data/method2_sample.xlsx', 'rb').read(),
                file_name="—à–∞–±–ª–æ–Ω_–º–µ—Ç–æ–¥2.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    
    # Define data source
    df = None
    
    if data_source == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ":
        if "–ú–µ—Ç–æ–¥ 1" in method:
            df = generate_sample_data_method1()
            st.session_state.uploaded_data = df
            st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ú–µ—Ç–æ–¥–∞ 1")
        else:
            df = generate_sample_data_method2()
            st.session_state.uploaded_data = df
            st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ú–µ—Ç–æ–¥–∞ 2")
    elif data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª" and st.session_state.uploaded_data is not None:
        df = st.session_state.uploaded_data
        st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
    
    # Main panel
    if df is not None:
        # Display loaded data
        st.markdown('<h2 class="sub-header">–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>', unsafe_allow_html=True)
        
        with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=False):
            st.dataframe(df, use_container_width=True)
        
        # Check if uploaded file matches selected method
        if "–ú–µ—Ç–æ–¥ 1" in method:
            valid, missing_columns = validate_columns(df, METHOD1_REQUIRED_COLUMNS)
            if not valid:
                st.error(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ú–µ—Ç–æ–¥—É 1. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É")
                df = None
        else:
            valid, missing_columns = validate_columns(df, METHOD2_REQUIRED_COLUMNS)
            if not valid:
                st.error(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ú–µ—Ç–æ–¥—É 2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É")
                df = None
        
        if df is not None and run_forecast:
            st.markdown('<h2 class="sub-header">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è</h2>', unsafe_allow_html=True)
            
            if "–ú–µ—Ç–æ–¥ 1" in method:
                # If no daily consumption column, create it with zeros
                if '–î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ' not in df.columns:
                    st.warning("–ö–æ–ª–æ–Ω–∫–∞ '–î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
                    df['–î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ'] = 0
                
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                    # Run forecast
                    summary_results, detailed_results = forecast_with_demand(df, end_date, step_days)
                    
                    # Save results to session state
                    st.session_state.forecast_summary = summary_results
                    st.session_state.forecast_details = detailed_results
                    
                    # Set initial selected date if not already set
                    if st.session_state.selected_forecast_date is None:
                        all_dates = detailed_results['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'].dt.strftime('%Y-%m-%d').unique()
                        if len(all_dates) > 0:
                            st.session_state.selected_forecast_date = all_dates[0]
                
                # Display results
                display_results(summary_results, detailed_results, "–ú–µ—Ç–æ–¥ 1")
                
            else:  # Method 2
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                    # Handle special cases
                    df = handle_materials_without_date(df)
                    df = handle_mixed_batches(df)
                    
                    # Run forecast
                    summary_results, detailed_results = forecast_without_demand(df, end_date, step_days)
                    
                    # Save results to session state
                    st.session_state.forecast_summary = summary_results
                    st.session_state.forecast_details = detailed_results
                    
                    # Set initial selected date if not already set
                    if st.session_state.selected_forecast_date is None:
                        all_dates = detailed_results['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'].dt.strftime('%Y-%m-%d').unique()
                        if len(all_dates) > 0:
                            st.session_state.selected_forecast_date = all_dates[0]
                
                # Display results
                display_results(summary_results, detailed_results, "–ú–µ—Ç–æ–¥ 2")
        
        # Display previous forecast results if they exist
        elif st.session_state.forecast_summary is not None and st.session_state.forecast_details is not None:
            st.markdown('<h2 class="sub-header">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è</h2>', unsafe_allow_html=True)
            display_results(st.session_state.forecast_summary, st.session_state.forecast_details, 
                            "–ú–µ—Ç–æ–¥ 1" if "–ú–µ—Ç–æ–¥ 1" in method else "–ú–µ—Ç–æ–¥ 2")
    else:
        if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª":
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

if __name__ == "__main__":
    main()