import streamlit as st
import pandas as pd
import datetime
import os

from constants import METHOD1_REQUIRED_COLUMNS, METHOD2_REQUIRED_COLUMNS
from utils import (
    validate_columns,
    generate_sample_data_method1,
    generate_sample_data_method2,
)
from data_processors import (
    forecast_with_demand,
    forecast_without_demand,
    handle_materials_without_date,
    handle_mixed_batches,
)
from visualization import display_results
from help import show_help_page

EXCEL_MIME_TYPE = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"


def initialize_session_state():
    """Initialize session state variables if they don't exist"""
    if "uploaded_data" not in st.session_state:
        st.session_state.uploaded_data = None

    if "forecast_summary" not in st.session_state:
        st.session_state.forecast_summary = None

    if "forecast_details" not in st.session_state:
        st.session_state.forecast_details = None

    if "forecast_method" not in st.session_state:
        st.session_state.forecast_method = "–ú–µ—Ç–æ–¥ 1: –° —É—á–µ—Ç–æ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"

    if "forecast_enddate" not in st.session_state:
        st.session_state.forecast_enddate = (
            datetime.datetime.now().date() + datetime.timedelta(days=365)
        )

    if "forecast_step" not in st.session_state:
        st.session_state.forecast_step = 30

    if "data_source" not in st.session_state:
        st.session_state.data_source = "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª"

    if "selected_forecast_date" not in st.session_state:
        st.session_state.selected_forecast_date = None

    if "export_type" not in st.session_state:
        st.session_state.export_type = "Excel (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)"

    if "last_uploaded_file" not in st.session_state:
        st.session_state.last_uploaded_file = None

    if "show_help" not in st.session_state:
        st.session_state.show_help = False


def toggle_help():
    """Toggle the help screen display state."""
    st.session_state.show_help = not st.session_state.show_help


def on_method_change():
    """Reset uploaded data when method changes"""
    st.session_state.uploaded_data = None
    st.session_state.forecast_summary = None
    st.session_state.forecast_details = None
    st.session_state.selected_forecast_date = None


def on_file_upload():
    """Handle file upload"""
    return


def main():
    st.set_page_config(
        page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –°–ù–ó –∏ –ö–°–ù–ó",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    initialize_session_state()

    st.markdown(
        """
    <style>
    .main-header {
        font-size: 2.5rem;
        color: #2B5797;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #2B5797;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    /* ... other styles ... */
    </style>
    """,
        unsafe_allow_html=True,
    )

    st.markdown(
        '<h1 class="main-header">–ü—Ä–æ–≥–Ω–æ–∑ –°–ù–ó –∏ –ö–°–ù–ó</h1>', unsafe_allow_html=True
    )

    with st.sidebar:
        help_col1, help_col2 = st.columns([1, 1])
        with help_col1:
            st.button(
                "üìö –°–ø—Ä–∞–≤–∫–∞" if not st.session_state.show_help else "üîô –ù–∞–∑–∞–¥",
                on_click=toggle_help,
                key="help_button",
                use_container_width=True,
            )

        with help_col2:
            if os.path.exists("documentation/user_guide.pdf"):
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
                    data=open("documentation/user_guide.pdf", "rb").read(),
                    file_name="—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.pdf",
                    mime="application/pdf",
                    use_container_width=True,
                )

        st.markdown("---")

        if not st.session_state.show_help:
            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")

            method = st.radio(
                "–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:",
                [
                    "–ú–µ—Ç–æ–¥ 1: –° —É—á–µ—Ç–æ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
                    "–ú–µ—Ç–æ–¥ 2: –ë–µ–∑ —É—á–µ—Ç–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø–∞—Å)",
                ],
                on_change=on_method_change,
                key="forecast_method",
            )

            if "–ú–µ—Ç–æ–¥ 1" in method:
                st.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ú–µ—Ç–æ–¥–∞ 1 (—Å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é)")
            else:
                st.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ú–µ—Ç–æ–¥–∞ 2 (–±–µ–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏)")

            data_source = st.radio(
                "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
                ["–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"],
                key="data_source",
            )

            if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª":
                uploaded_file = st.file_uploader(
                    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª", type=["xlsx", "xls"], key="file_uploader"
                )

                if uploaded_file is not None:
                    try:
                        df = pd.read_excel(uploaded_file)
                        st.session_state.uploaded_data = df
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

            today = datetime.datetime.now().date()
            end_date = st.date_input(
                "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
                value=st.session_state.forecast_enddate,
                min_value=today,
                max_value=today + datetime.timedelta(days=1825),
                key="forecast_enddate",
            )

            step_days = st.number_input(
                "–®–∞–≥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–∏):",
                1,
                90,
                value=st.session_state.forecast_step,
                key="forecast_step",
            )

            st.markdown("---")
            run_forecast = st.button(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary", use_container_width=True
            )

            st.markdown("---")
            st.subheader("–®–∞–±–ª–æ–Ω—ã –¥–∞–Ω–Ω—ã—Ö")

            if not os.path.exists("sample_data"):
                os.makedirs("sample_data")

            col1, col2 = st.columns(2)
            with col1:
                if not os.path.exists("sample_data/method1_sample.xlsx"):
                    sample_df1 = generate_sample_data_method1()
                    sample_df1.to_excel("sample_data/method1_sample.xlsx", index=False)

                st.download_button(
                    label="–®–∞–±–ª–æ–Ω –¥–ª—è –ú–µ—Ç–æ–¥–∞ 1",
                    data=open("sample_data/method1_sample.xlsx", "rb").read(),
                    file_name="—à–∞–±–ª–æ–Ω_–º–µ—Ç–æ–¥1.xlsx",
                    mime=EXCEL_MIME_TYPE,
                )

            with col2:
                if not os.path.exists("sample_data/method2_sample.xlsx"):
                    sample_df2 = generate_sample_data_method2()
                    sample_df2.to_excel("sample_data/method2_sample.xlsx", index=False)

                st.download_button(
                    label="–®–∞–±–ª–æ–Ω –¥–ª—è –ú–µ—Ç–æ–¥–∞ 2",
                    data=open("sample_data/method2_sample.xlsx", "rb").read(),
                    file_name="—à–∞–±–ª–æ–Ω_–º–µ—Ç–æ–¥2.xlsx",
                    mime=EXCEL_MIME_TYPE,
                )

    if st.session_state.show_help:
        show_help_page()
    else:
        df = None
        if data_source == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ":
            if "–ú–µ—Ç–æ–¥ 1" in method:
                df = generate_sample_data_method1()
            else:
                df = generate_sample_data_method2()
            st.session_state.uploaded_data = df
            st.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {method}")
        elif st.session_state.uploaded_data is not None:
            df = st.session_state.uploaded_data
            st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –°—Ç—Ä–æ–∫: {len(df)}")

        if df is not None:
            st.markdown(
                '<h2 class="sub-header">–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>', unsafe_allow_html=True
            )
            with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=False):
                st.dataframe(df, use_container_width=True)

            required_cols = (
                METHOD1_REQUIRED_COLUMNS
                if "–ú–µ—Ç–æ–¥ 1" in method
                else METHOD2_REQUIRED_COLUMNS
            )
            valid, missing = validate_columns(df, required_cols)
            if not valid:
                st.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫: {', '.join(missing)}")
                df = None

            if df is not None and run_forecast:
                st.markdown(
                    '<h2 class="sub-header">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>', unsafe_allow_html=True
                )
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                    if "–ú–µ—Ç–æ–¥ 1" in method:
                        summary, details = forecast_with_demand(df, end_date, step_days)
                    else:  # Method 2
                        df = handle_materials_without_date(df)
                        df = handle_mixed_batches(df)
                        summary, details = forecast_without_demand(
                            df, end_date, step_days
                        )

                    st.session_state.forecast_summary = summary
                    st.session_state.forecast_details = details
                    if (
                        st.session_state.selected_forecast_date is None
                        and not details.empty
                    ):
                        all_dates = details["–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"].unique()
                        if len(all_dates) > 0:
                            st.session_state.selected_forecast_date = all_dates[0]

                if not summary.empty:
                    display_results(summary, details, method)

            elif st.session_state.forecast_summary is not None:
                st.markdown(
                    '<h2 class="sub-header">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>', unsafe_allow_html=True
                )
                display_results(
                    st.session_state.forecast_summary,
                    st.session_state.forecast_details,
                    method,
                )
        else:
            if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª":
                st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")


if __name__ == "__main__":
    main()
