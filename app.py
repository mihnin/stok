import streamlit as st
import pandas as pd
import datetime
import plotly.express as px
import plotly.graph_objects as go
import io
import os

from constants import COLOR_CODES, METHOD1_REQUIRED_COLUMNS, METHOD2_REQUIRED_COLUMNS
from utils import validate_columns, generate_sample_data_method1, generate_sample_data_method2
from data_processors import (
    forecast_with_demand,
    forecast_without_demand,
    handle_materials_without_date,
    handle_mixed_batches
)

def main():
    st.set_page_config(
        page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –°–ù–ó –∏ –ö–°–ù–ó",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        color: #2B5797;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #2B5797;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .status-box {
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }
    .status-likvid {
        background-color: #00b050;
        color: white;
    }
    .status-ksnz {
        background-color: #ffbf00;
        color: black;
    }
    .status-snz {
        background-color: #ff4c4c;
        color: white;
    }
    .status-snz3 {
        background-color: #c00000;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown('<h1 class="main-header">–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ä—Ö–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤ (–°–ù–ó –∏ –ö–°–ù–ó)</h1>', unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with st.sidebar:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        method = st.radio(
            "–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:",
            [
                "–ú–µ—Ç–æ–¥ 1: –° —É—á–µ—Ç–æ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
                "–ú–µ—Ç–æ–¥ 2: –ë–µ–∑ —É—á–µ—Ç–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø–∞—Å)"
            ]
        )
        
        data_source = st.radio(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
            [
                "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
            ]
        )
        
        if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª":
            uploaded_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
                type=["xlsx", "xls"]
            )
        
        today = datetime.datetime.now().date()
        end_date = st.date_input(
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
            value=today + datetime.timedelta(days=365),
            min_value=today,
            max_value=today + datetime.timedelta(days=1825)  # –ú–∞–∫—Å–∏–º—É–º 5 –ª–µ—Ç
        )
        
        step_days = st.number_input(
            "–®–∞–≥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–∏):",
            min_value=1,
            max_value=90,
            value=30
        )
        
        st.markdown("---")
        
        st.markdown("""
        ### –£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
        <div class="status-box status-likvid">–õ–∏–∫–≤–∏–¥–Ω—ã–π –∑–∞–ø–∞—Å</div>
        <div class="status-box status-ksnz">–ö–°–ù–ó (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–≤–µ—Ä—Ö–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø–∞—Å)</div>
        <div class="status-box status-snz">–°–ù–ó (–°–≤–µ—Ä—Ö–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø–∞—Å)</div>
        <div class="status-box status-snz3">–°–ù–ó > 3 –ª–µ—Ç</div>
        """, unsafe_allow_html=True)
        
        run_forecast = st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary", use_container_width=True)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = None
    
    if data_source == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ":
        if "–ú–µ—Ç–æ–¥ 1" in method:
            df = generate_sample_data_method1()
            st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ú–µ—Ç–æ–¥–∞ 1")
        else:
            df = generate_sample_data_method2()
            st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ú–µ—Ç–æ–¥–∞ 2")
    elif data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª" and uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
    if df is not None:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        st.markdown('<h2 class="sub-header">–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>', unsafe_allow_html=True)
        
        with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=False):
            st.dataframe(df, use_container_width=True)
        
        if run_forecast:
            st.markdown('<h2 class="sub-header">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è</h2>', unsafe_allow_html=True)
            
            if "–ú–µ—Ç–æ–¥ 1" in method:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ú–µ—Ç–æ–¥–∞ 1
                valid, missing_columns = validate_columns(df, METHOD1_REQUIRED_COLUMNS)
                
                if not valid:
                    st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–Ω–µ–≤–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º, —Å–æ–∑–¥–∞–µ–º –µ–µ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    if '–î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ' not in df.columns:
                        st.warning("–ö–æ–ª–æ–Ω–∫–∞ '–î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
                        df['–î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ'] = 0
                    
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        summary_results, detailed_results = forecast_with_demand(df, end_date, step_days)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    display_results(summary_results, detailed_results, "–ú–µ—Ç–æ–¥ 1")
                    
            else:  # –ú–µ—Ç–æ–¥ 2
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ú–µ—Ç–æ–¥–∞ 2
                valid, missing_columns = validate_columns(df, METHOD2_REQUIRED_COLUMNS)
                
                if not valid:
                    st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
                else:
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤
                        df = handle_materials_without_date(df)
                        df = handle_mixed_batches(df)
                        
                        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        summary_results, detailed_results = forecast_without_demand(df, end_date, step_days)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    display_results(summary_results, detailed_results, "–ú–µ—Ç–æ–¥ 2")
    else:
        if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª":
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

def display_results(summary_df, detailed_df, method_name):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        summary_df: –°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
        detailed_df: –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
        method_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    tab1, tab2, tab3 = st.tabs(["–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–ø–∞—Å–æ–≤", "–¢–∞–±–ª–∏—Ü–∞ —Å–≤–æ–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"])
    
    with tab1:
        st.markdown('<h3 class="sub-header">–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>', unsafe_allow_html=True)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        value_column = '–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' if '–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in summary_df.columns else '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø–∞—Å'
        
        pivot_df = summary_df.pivot_table(
            index='–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞',
            columns='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            values=value_column,
            aggfunc='sum'
        ).fillna(0).reset_index()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_order = ["–õ–∏–∫–≤–∏–¥–Ω—ã–π", "–ö–°–ù–ó", "–°–ù–ó", "–°–ù–ó > 3 –ª–µ—Ç", "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"]
        
        for category in categories_order:
            if category in pivot_df.columns:
                fig.add_trace(go.Scatter(
                    x=pivot_df['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'],
                    y=pivot_df[category],
                    mode='lines+markers',
                    name=category,
                    line=dict(color=COLOR_CODES.get(category, '#808080'), width=3),
                    marker=dict(size=8)
                ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        fig.update_layout(
            title=f"–ü—Ä–æ–≥–Ω–æ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –∑–∞–ø–∞—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ({method_name})",
            xaxis_title="–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞",
            yaxis_title=f"–û–±—ä–µ–º –∑–∞–ø–∞—Å–æ–≤ ({value_column})",
            legend_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø–∞—Å–∞",
            hovermode="x unified",
            height=600,
            template="plotly_white"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –≤–∏–¥–µ –æ–±–ª–∞—Å—Ç–∏
        fig_area = go.Figure()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories_order:
            if category in pivot_df.columns:
                # Use rgba() format for colors with transparency
                base_color = COLOR_CODES.get(category, '#808080')
                # Convert hex to rgba with 0.5 opacity
                if base_color.startswith('#'):
                    r = int(base_color[1:3], 16)
                    g = int(base_color[3:5], 16)
                    b = int(base_color[5:7], 16)
                    rgba_color = f'rgba({r},{g},{b},0.5)'
                else:
                    rgba_color = base_color
                
                fig_area.add_trace(go.Scatter(
                    x=pivot_df['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'],
                    y=pivot_df[category],
                    mode='none',
                    name=category,
                    fill='tonexty',
                    fillcolor=rgba_color,
                    line=dict(width=0)
                ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        fig_area.update_layout(
            title=f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∞—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ({method_name})",
            xaxis_title="–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞",
            yaxis_title=f"–û–±—ä–µ–º –∑–∞–ø–∞—Å–æ–≤ ({value_column})",
            legend_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø–∞—Å–∞",
            hovermode="x unified",
            height=500,
            template="plotly_white"
        )
        
        st.plotly_chart(fig_area, use_container_width=True)
    
    with tab2:
        st.markdown('<h3 class="sub-header">–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞</h3>', unsafe_allow_html=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        formatted_summary = summary_df.copy()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞' –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_summary['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'] = formatted_summary['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'].dt.strftime('%Y-%m-%d')
        
        # Ensure unique index for styling
        formatted_summary = formatted_summary.reset_index(drop=True)
        
        # Create a color mapping for each row based on category
        def color_rows(row):
            color = COLOR_CODES.get(row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'], '#808080')
            text_color = 'black' if row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] in ['–õ–∏–∫–≤–∏–¥–Ω—ã–π', '–ö–°–ù–ó'] else 'white'
            return [f'background-color: {color}; color: {text_color}'] * len(row)
        
        # Display with styling
        st.dataframe(formatted_summary.style.apply(color_rows, axis=1), use_container_width=True)
    
    with tab3:
        st.markdown('<h3 class="sub-header">–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º</h3>', unsafe_allow_html=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        all_dates = detailed_df['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'].dt.strftime('%Y-%m-%d').unique()
        selected_date = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞:", all_dates)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        filtered_df = detailed_df[detailed_df['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'].dt.strftime('%Y-%m-%d') == selected_date].copy()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if '–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è' in filtered_df.columns:
            filtered_df['–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è'] = filtered_df['–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è'].dt.strftime('%Y-%m-%d')
        if '–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥' in filtered_df.columns:
            filtered_df['–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥'] = filtered_df['–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥'].dt.strftime('%Y-%m-%d')
        filtered_df['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'] = filtered_df['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'].dt.strftime('%Y-%m-%d')
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_columns = [col for col in filtered_df.columns if col not in ['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞']]
        
        # Ensure unique index for styling
        display_df = filtered_df[display_columns].reset_index(drop=True)
        
        # Create a color mapping for each row based on category
        def color_rows_detailed(row):
            color = COLOR_CODES.get(row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'], '#808080')
            text_color = 'black' if row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] in ['–õ–∏–∫–≤–∏–¥–Ω—ã–π', '–ö–°–ù–ó'] else 'white'
            return [f'background-color: {color}; color: {text_color}'] * len(row)
            
        # Display with styling
        st.dataframe(display_df.style.apply(color_rows_detailed, axis=1), use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown('<h3 class="sub-header">–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h3>', unsafe_allow_html=True)
    
    export_type = st.radio(
        "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        ["Excel (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)", "Excel (—Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"],
        horizontal=True
    )
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    output = io.BytesIO()
    
    if export_type == "Excel (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)":
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            summary_df.to_excel(writer, sheet_name='–°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', index=False)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞—Ç–∞–º
            for date in detailed_df['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'].dt.strftime('%Y-%m-%d').unique():
                sheet_name = f"–î–µ—Ç–∞–ª–∏_{date}"
                date_df = detailed_df[detailed_df['–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'].dt.strftime('%Y-%m-%d') == date]
                date_df.to_excel(writer, sheet_name=sheet_name[:31], index=False)  # Excel –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∏–º—è –ª–∏—Å—Ç–∞ 31 —Å–∏–º–≤–æ–ª–æ–º
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            pivot_df.to_excel(writer, sheet_name='–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—á–µ–π –∫–Ω–∏–≥–∏
            workbook = writer.book
            worksheet = writer.sheets['–°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for category, color in COLOR_CODES.items():
                category_format = workbook.add_format({'bg_color': color})
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                worksheet.conditional_format('B2:B1000', {'type': 'text',
                                                        'criteria': 'containing',
                                                        'value': category,
                                                        'format': category_format})
    else:
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            summary_df.to_excel(writer, sheet_name='–°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', index=False)
            pivot_df.to_excel(writer, sheet_name='–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã']
            
            for category, color in COLOR_CODES.items():
                category_format = workbook.add_format({'bg_color': color})
                worksheet.conditional_format('B2:B1000', {'type': 'text',
                                                        'criteria': 'containing',
                                                        'value': category,
                                                        'format': category_format})
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel",
        data=output.getvalue(),
        file_name=f"–ø—Ä–æ–≥–Ω–æ–∑_—Å–Ω–∑_–∫—Å–Ω–∑_{datetime.datetime.now().strftime('%Y-%m-%d')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        use_container_width=True
    )

if __name__ == "__main__":
    main()